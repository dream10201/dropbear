name: Build Dropbear for Multiple Architectures

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04  # 固定 Ubuntu 22.04，确保依赖兼容

    strategy:
      matrix:
        arch:
          - { name: "x86_64", target: "x86_64-linux-gnu", cc: "gcc", cflags: "-m64", strip: "strip", zlib_path: "/usr/lib/x86_64-linux-gnu" }
          - { name: "i686", target: "i686-linux-gnu", cc: "gcc", cflags: "-m32 -march=i686", strip: "strip", zlib_path: "/usr/lib32" }
          - { name: "arm", target: "arm-linux-gnueabihf", cc: "arm-linux-gnueabihf-gcc", cflags: "", strip: "arm-linux-gnueabihf-strip", zlib_path: "/usr/lib/arm-linux-gnueabihf" }
          - { name: "aarch64", target: "aarch64-linux-gnu", cc: "aarch64-linux-gnu-gcc", cflags: "", strip: "aarch64-linux-gnu-strip", zlib_path: "/usr/lib/aarch64-linux-gnu" }

    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 更新软件源并安装依赖
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update
          # 安装基本工具和 zlib
          sudo apt-get install -y \
            build-essential \
            git \
            zlib1g-dev \
            lib32z1 \
            autoconf \
            automake \
            libtool
          # 安装交叉编译工具链
          sudo apt-get install -y \
            gcc-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu \
            binutils-arm-linux-gnueabihf \
            binutils-aarch64-linux-gnu
          # 验证 zlib 静态库是否存在
          ls -l /usr/lib/x86_64-linux-gnu/libz.a || echo "x86_64 zlib missing"
          ls -l /usr/lib32/libz.a || echo "i686 zlib missing"
          ls -l /usr/lib/arm-linux-gnueabihf/libz.a || echo "arm zlib missing"
          ls -l /usr/lib/aarch64-linux-gnu/libz.a || echo "aarch64 zlib missing"

      # 3. 验证工具链安装
      - name: Verify Toolchains
        run: |
          gcc --version
          arm-linux-gnueabihf-gcc --version || echo "ARM toolchain missing"
          aarch64-linux-gnu-gcc --version || echo "AArch64 toolchain missing"

      # 4. 下载 Dropbear 源码
      - name: Download Dropbear Source
        run: |
          git clone https://github.com/mkj/dropbear.git
          cd dropbear
          git checkout DROPBEAR_2022.83  # 可调整版本

      # 5. 配置和静态编译 Dropbear
      - name: Configure and Build Dropbear
        working-directory: dropbear
        run: |
          autoreconf -i
          CC=${{ matrix.arch.cc }} \
          CFLAGS="${{ matrix.arch.cflags }} -static -I/usr/include" \
          LDFLAGS="-static -L${{ matrix.arch.zlib_path }} -lz" \
          ./configure \
            --host=${{ matrix.arch.target }} \
            --disable-shared \
            --enable-static \
            --prefix=/usr/local/dropbear-${{ matrix.arch.name }}
          make -j$(nproc) PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp"

      # 6. 剥离符号表
      - name: Strip Binaries
        working-directory: dropbear
        run: |
          ${{ matrix.arch.strip }} dropbear dbclient dropbearkey dropbearconvert scp

      # 7. 验证静态链接
      - name: Verify Static Linking
        working-directory: dropbear
        run: |
          file dropbear | grep "statically linked" || echo "Static linking failed"

      # 8. 准备输出文件
      - name: Prepare Artifacts
        working-directory: dropbear
        run: |
          mkdir -p ../artifacts/${{ matrix.arch.name }}
          cp dropbear dbclient dropbearkey dropbearconvert scp ../artifacts/${{ matrix.arch.name }}/

      # 9. 上传编译结果
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dropbear-${{ matrix.arch.name }}
          path: artifacts/${{ matrix.arch.name }}/*
          retention-days: 7
